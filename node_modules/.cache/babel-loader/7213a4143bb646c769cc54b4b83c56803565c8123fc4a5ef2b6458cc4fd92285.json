{"ast":null,"code":"import axios from \"axios\";\nexport const api = axios.create({\n  baseURL: 'https://examplealuraflix.onrender.com'\n});\n\n//GET\nexport const buscarUltimoVideo = async (url, setData) => {\n  const respuesta = await api.get(url);\n  const datos = respuesta.data;\n  const datosInvertidos = datos.slice().reverse();\n  setData(datosInvertidos[0]);\n};\nexport const buscarCategoria = async (url, setData) => {\n  const respuesta = await api.get(url);\n  const datos = respuesta.data;\n  setData(datos);\n};\nexport const buscarVideos = async (url, setData) => {\n  const respuesta = await api.get(url);\n  const datos = respuesta.data;\n  const datosInvertidos = datos.reverse().slice(0, 6);\n  setData(datosInvertidos);\n};\nexport const buscarUsuario = async (url, setData) => {\n  const respuesta = await api.get(url);\n  const datos = respuesta.data;\n  setData(datos);\n};\nexport const buscarCategoriaEspecifica = async (url, setData) => {\n  const respuesta = await api.get(url);\n  const datos = respuesta.data;\n  setData(datos);\n};\n\n//POST\nexport const agregarVideo = async (id, titulo, URLVideo, descripcion, categoria) => {\n  api.post('/video', {\n    id,\n    titulo,\n    URLVideo,\n    descripcion,\n    categoria\n  }).then(() => alert('Agregado agregado =)')).catch(() => alert('Hay un error'));\n};\nexport const agregarCategoria = async (id, titulo, descripcion, color) => {\n  api.post('/categoria', {\n    id,\n    titulo,\n    descripcion,\n    color\n  }).then(() => alert('Categoría agregada =)')).catch(() => alert('Hay un error'));\n};\n\n//DELETE\nexport const borrarVideo = async id => {\n  api.delete(`/video/${id}`).then(() => alert('Video eliminado')).catch(() => alert('Hay un error'));\n};\nexport const borrarCategoria = async id => {\n  api.delete(`/categoria/${id}`).then(() => alert('Categoría eliminada')).catch(() => alert('Hay un error'));\n};\n\n//PUT\nexport const modificarCategoria = async (id, titulo, descripcion, color) => {\n  api.put(`/categoria/${id}`, {\n    id,\n    titulo,\n    descripcion,\n    color\n  }).then(() => alert('Categoría actualizada')).catch(() => alert('Hay un error'));\n};\n\n/*export const listaVideos = async () => {\n    return await axios.get('http://localhost:9000/video');\n};\n\nexport const listaCategorias = () => {\n    return axios.get('http://localhost:9000/categoria');\n} */","map":{"version":3,"names":["axios","api","create","baseURL","buscarUltimoVideo","url","setData","respuesta","get","datos","data","datosInvertidos","slice","reverse","buscarCategoria","buscarVideos","buscarUsuario","buscarCategoriaEspecifica","agregarVideo","id","titulo","URLVideo","descripcion","categoria","post","then","alert","catch","agregarCategoria","color","borrarVideo","delete","borrarCategoria","modificarCategoria","put"],"sources":["C:/Users/HP/Downloads/Aluraflix-ChallengeONEG4-main/Aluraflix-ChallengeONEG4/src/client-service/client-service.js"],"sourcesContent":["import axios from \"axios\";\n\nexport const api = axios.create({\n    baseURL: 'https://examplealuraflix.onrender.com'\n})\n\n//GET\nexport const buscarUltimoVideo = async ( url, setData ) => {\n    const respuesta = await api.get(url)\n    const datos = respuesta.data;\n    const datosInvertidos = datos.slice().reverse();\n    setData(datosInvertidos[0]);\n}\n\nexport const buscarCategoria = async ( url, setData ) => {\n    const respuesta = await api.get(url)\n    const datos = respuesta.data;\n    setData(datos);\n}\n\nexport const buscarVideos = async ( url, setData ) => {\n    const respuesta = await api.get(url)\n    const datos = respuesta.data;\n    const datosInvertidos = datos.reverse().slice(0,6);\n    setData(datosInvertidos);\n}\n\nexport const buscarUsuario = async ( url, setData ) => {\n    const respuesta = await api.get(url)\n    const datos = respuesta.data;\n    setData(datos);\n}\n\nexport const buscarCategoriaEspecifica = async ( url, setData ) => {\n    const respuesta = await api.get(url)\n    const datos = respuesta.data;\n    setData(datos);\n}\n\n//POST\nexport const agregarVideo = async ( id, titulo, URLVideo, descripcion, categoria ) => {\n    api.post('/video', {\n        id, \n        titulo, \n        URLVideo, \n        descripcion, \n        categoria\n    })\n    .then(() => alert('Agregado agregado =)'))\n    .catch(() => alert('Hay un error'));\n}\n\nexport const agregarCategoria = async ( id, titulo, descripcion, color ) => {\n    api.post('/categoria', {\n        id, \n        titulo, \n        descripcion, \n        color\n    })\n    .then(() => alert('Categoría agregada =)'))\n    .catch(() => alert('Hay un error'));\n}\n\n//DELETE\nexport const borrarVideo = async ( id ) => {\n    api.delete(`/video/${id}`)\n    .then(() => alert('Video eliminado') )\n    .catch(() => alert('Hay un error'));\n}\n\nexport const borrarCategoria = async ( id ) => {\n    api.delete(`/categoria/${id}`)\n    .then(() => alert('Categoría eliminada'))\n    .catch(() => alert('Hay un error'));\n}\n\n//PUT\nexport const modificarCategoria = async ( id, titulo, descripcion, color ) => {\n    api.put(`/categoria/${id}`, {\n        id, \n        titulo, \n        descripcion, \n        color\n    })\n    .then(() => alert('Categoría actualizada'))\n    .catch(() => alert('Hay un error'));\n}\n\n/*export const listaVideos = async () => {\n    return await axios.get('http://localhost:9000/video');\n};\n\nexport const listaCategorias = () => {\n    return axios.get('http://localhost:9000/categoria');\n} */\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}